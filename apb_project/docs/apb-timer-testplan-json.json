{
  "apb_timer_test_plan": {
    "1_basic_functionality_tests": {
      "1_1_32_bit_mode_tests": [
        "Verify that both 32-bit timers (low and high) can be configured and operated independently",
        "Test the functionality of input_lo, output_lo, input_hi, and output_hi pins"
      ],
      "1_2_64_bit_mode_tests": [
        "Confirm that the timer operates as a single 64-bit timer when configured in 64-bit mode",
        "Verify that both high and low input pins are driven correctly",
        "Check that the output is correctly driven on the low pin"
      ]
    },
    "2_timer_operation_tests": {
      "2_1_timer_with_both_prescaler_and_ref_clk_disabled": [
        "Verify that the counter increments on every positive edge of Hclk",
        "Confirm that the interrupt is triggered when the count reaches the compare value"
      ],
      "2_2_timer_with_prescaler_disabled_and_ref_clk_enabled": [
        "Check that the counter starts incrementing only after detecting the reference clock's edge",
        "Verify that the counter increments on every positive edge of the reference clock"
      ],
      "2_3_timer_with_prescaler_enabled_and_ref_clk_disabled": [
        "Confirm that the prescaler operates correctly before the counter starts",
        "Verify that the counter increments on every positive edge of Hclk after the prescaler target is reached"
      ],
      "2_4_timer_with_prescaler_enabled_and_ref_clk_enabled": [
        "Test that the counter starts only after both the prescaler target is reached and the reference clock's edge is detected",
        "Verify that the counter increments on every positive edge of the reference clock"
      ]
    },
    "3_mode_tests": {
      "3_1_one_shot_mode": [
        "Confirm that the timer is completely disabled after reaching the target count for the first time"
      ],
      "3_2_compare_clear_mode": [
        "Verify that the timer count resets to '0' when it reaches the target compare count",
        "Check that interrupts are generated multiple times if the counter keeps reaching the target compare count"
      ]
    },
    "4_feature_tests": {
      "4_1_mode_selection": [
        "Test switching between 32-bit and 64-bit modes using the MODE_64_BIT configuration"
      ],
      "4_2_counter_reset": [
        "Verify that the RESET_BIT in CFG_REG_LO and CFG_REG_HI correctly resets the counter value"
      ],
      "4_3_clock_source_selection": [
        "Test enabling and disabling the ref_clk using the REF_CLK_EN_BIT",
        "Verify that the timer uses the correct clock source in each case"
      ],
      "4_4_prescaler_functionality": [
        "Test enabling and disabling the prescaler using the PRESCALER_BIT",
        "Verify that the prescaler divisor works correctly with different values"
      ],
      "4_5_counter_enable_disable": [
        "Check that the ENABLE_BIT correctly starts and stops the counter"
      ],
      "4_6_mtime_mode": [
        "Test the MODE_MTIME_BIT functionality in 64-bit mode",
        "Verify that interrupts are generated when count == compare_value, even if IRQ_bit is not set"
      ],
      "4_7_external_control": [
        "Test the stoptimer_i pin functionality to stop the counter operation",
        "Verify the busy_o pin indicates when any counter is enabled"
      ],
      "4_8_counter_value_manipulation": [
        "Test overwriting the counter value directly using TIMER_VAL_LO and TIMER_VAL_HI registers",
        "Verify setting initial counter values"
      ]
    },
    "5_interrupt_tests": {
      "5_1_interrupt_generation": [
        "Verify that interrupts are generated correctly when the counter reaches the compare value",
        "Test interrupt behavior in both 32-bit and 64-bit modes"
      ],
      "5_2_interrupt_enable_disable": [
        "Check that the IRQ_BIT correctly enables and disables interrupt generation"
      ]
    },
    "6_register_tests": {
      "6_1_register_read_write": [
        "Verify that all registers (CFG_REG_LO, CFG_REG_HI, TIMER_VAL_LO, TIMER_VAL_HI, TIMER_CMP_LO, TIMER_CMP_HI) can be read from and written to correctly"
      ],
      "6_2_write_strobe_registers": [
        "Test the functionality of write strobe registers (TIMER_START_LO, TIMER_START_HI, TIMER_RESET_LO, TIMER_RESET_HI)"
      ]
    },
    "7_edge_case_and_stress_tests": {
      "7_1_boundary_values": [
        "Test the timers with minimum and maximum possible values for counters and compare registers"
      ],
      "7_2_rapid_mode_switching": [
        "Rapidly switch between 32-bit and 64-bit modes to ensure stability"
      ],
      "7_3_multiple_interrupt_handling": [
        "Generate multiple interrupts in quick succession and verify correct handling"
      ],
      "7_4_clock_domain_crossing": [
        "Test behavior when switching between ref_clk and Hclk, especially near counter increment boundaries"
      ]
    },
    "8_error_handling_and_recovery_tests": {
      "8_1_invalid_configurations": [
        "Attempt to set invalid configurations and verify appropriate error handling or rejection"
      ],
      "8_2_overflow_handling": [
        "Test behavior when counters overflow, especially in 64-bit mode"
      ]
    },
    "9_performance_tests": {
      "9_1_timing_accuracy": [
        "Measure and verify the timing accuracy of the timer in various configurations"
      ],
      "9_2_interrupt_latency": [
        "Measure the latency between the counter reaching the compare value and the interrupt being generated"
      ]
    },
    "10_integration_tests": {
      "10_1_apb_bus_interface": [
        "Verify correct operation of the timer when accessed through the APB bus interface"
      ],
      "10_2_system_level_integration": [
        "Test the timer's functionality when integrated with other system components"
      ]
    }
  }
}
